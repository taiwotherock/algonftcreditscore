{
  "version": 3,
  "sources": [
    "../../nftcreditscore/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;AAAA;AAAA;AAHH;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIU;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AACP;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AANH;AAAA;AAQA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEa;AAAA;AAAA;AAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGa;AAAA;;AAAA;AAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AACP;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAAA;AAPH;AAAA;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAGG;AAEH;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;;;;;;;;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 32 0"
    },
    "7": {
      "op": "bytecblock \"bcsnft_\" 0x151f7c75 \"bcsaddr_\""
    },
    "31": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "33": {
      "op": "bz main___algopy_default_create@18",
      "stack_out": []
    },
    "36": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "39": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "40": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "42": {
      "op": "assert",
      "stack_out": []
    },
    "43": {
      "op": "pushbytess 0xc259d40c 0x22bf9315 0x91c9442f 0x9797fb5f 0x3c99f817 0x1fcfc44a 0xc8d5518d 0x9b4aead4 0x02bece11 // method \"create(address,string)void\", method \"mint(uint64,address,uint64,uint64,string)void\", method \"get_credit_info(uint64)(address,uint64,uint64,string)\", method \"get_credit_info_by_address(address)(address,uint64,uint64,string)\", method \"get_metadata_url(uint64)string\", method \"update_credit_info_by_address(address,uint64,uint64)void\", method \"arc72_ownerOf(uint64)address\", method \"arc72_transferFrom(address,address,uint64)void\", method \"hello(string)string\"",
      "defined_out": [
        "Method(arc72_ownerOf(uint64)address)",
        "Method(arc72_transferFrom(address,address,uint64)void)",
        "Method(create(address,string)void)",
        "Method(get_credit_info(uint64)(address,uint64,uint64,string))",
        "Method(get_credit_info_by_address(address)(address,uint64,uint64,string))",
        "Method(get_metadata_url(uint64)string)",
        "Method(hello(string)string)",
        "Method(mint(uint64,address,uint64,uint64,string)void)",
        "Method(update_credit_info_by_address(address,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(create(address,string)void)",
        "Method(mint(uint64,address,uint64,uint64,string)void)",
        "Method(get_credit_info(uint64)(address,uint64,uint64,string))",
        "Method(get_credit_info_by_address(address)(address,uint64,uint64,string))",
        "Method(get_metadata_url(uint64)string)",
        "Method(update_credit_info_by_address(address,uint64,uint64)void)",
        "Method(arc72_ownerOf(uint64)address)",
        "Method(arc72_transferFrom(address,address,uint64)void)",
        "Method(hello(string)string)"
      ]
    },
    "90": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc72_ownerOf(uint64)address)",
        "Method(arc72_transferFrom(address,address,uint64)void)",
        "Method(create(address,string)void)",
        "Method(get_credit_info(uint64)(address,uint64,uint64,string))",
        "Method(get_credit_info_by_address(address)(address,uint64,uint64,string))",
        "Method(get_metadata_url(uint64)string)",
        "Method(hello(string)string)",
        "Method(mint(uint64,address,uint64,uint64,string)void)",
        "Method(update_credit_info_by_address(address,uint64,uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(create(address,string)void)",
        "Method(mint(uint64,address,uint64,uint64,string)void)",
        "Method(get_credit_info(uint64)(address,uint64,uint64,string))",
        "Method(get_credit_info_by_address(address)(address,uint64,uint64,string))",
        "Method(get_metadata_url(uint64)string)",
        "Method(update_credit_info_by_address(address,uint64,uint64)void)",
        "Method(arc72_ownerOf(uint64)address)",
        "Method(arc72_transferFrom(address,address,uint64)void)",
        "Method(hello(string)string)",
        "tmp%6#0"
      ]
    },
    "93": {
      "op": "match create mint get_credit_info get_credit_info_by_address get_metadata_url update_credit_info_by_address arc72_ownerOf arc72_transferFrom hello",
      "stack_out": []
    },
    "113": {
      "op": "err"
    },
    "114": {
      "block": "main___algopy_default_create@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "116": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "119": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "120": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "121": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "122": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "admin#0"
      ],
      "stack_out": [
        "admin#0"
      ]
    },
    "127": {
      "op": "dup",
      "defined_out": [
        "admin#0",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "admin#0",
        "admin#0 (copy)"
      ]
    },
    "128": {
      "op": "len",
      "defined_out": [
        "admin#0",
        "len%0#0"
      ],
      "stack_out": [
        "admin#0",
        "len%0#0"
      ]
    },
    "129": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "admin#0",
        "len%0#0"
      ],
      "stack_out": [
        "admin#0",
        "len%0#0",
        "32"
      ]
    },
    "130": {
      "op": "==",
      "defined_out": [
        "admin#0",
        "eq%0#0"
      ],
      "stack_out": [
        "admin#0",
        "eq%0#0"
      ]
    },
    "131": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "admin#0"
      ]
    },
    "132": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "admin#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "admin#0",
        "metadata_ipfs#0",
        "metadata_ipfs#0 (copy)"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "metadata_ipfs#0 (copy)"
      ]
    },
    "136": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "admin#0",
        "metadata_ipfs#0",
        "metadata_ipfs#0 (copy)"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "metadata_ipfs#0 (copy)",
        "0"
      ]
    },
    "137": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "admin#0",
        "aggregate%array_length%0#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "aggregate%array_length%0#0"
      ]
    },
    "138": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "admin#0",
        "aggregate%array_length%0#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "140": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "admin#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "add%0#0"
      ]
    },
    "141": {
      "op": "dig 1",
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "add%0#0",
        "metadata_ipfs#0 (copy)"
      ]
    },
    "143": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "admin#0",
        "len%1#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "admin#0",
        "eq%1#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "eq%1#0"
      ]
    },
    "145": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0"
      ]
    },
    "146": {
      "op": "pushbytes \"admin\"",
      "defined_out": [
        "\"admin\"",
        "admin#0",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "admin#0",
        "metadata_ipfs#0",
        "\"admin\""
      ]
    },
    "153": {
      "op": "uncover 2",
      "stack_out": [
        "metadata_ipfs#0",
        "\"admin\"",
        "admin#0"
      ]
    },
    "155": {
      "op": "app_global_put",
      "stack_out": [
        "metadata_ipfs#0"
      ]
    },
    "156": {
      "op": "pushbytes \"metadata_ipfs\"",
      "defined_out": [
        "\"metadata_ipfs\"",
        "metadata_ipfs#0"
      ],
      "stack_out": [
        "metadata_ipfs#0",
        "\"metadata_ipfs\""
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "\"metadata_ipfs\"",
        "metadata_ipfs#0"
      ]
    },
    "172": {
      "op": "app_global_put",
      "stack_out": []
    },
    "173": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "174": {
      "op": "return",
      "stack_out": []
    },
    "175": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.mint[routing]",
      "params": {},
      "block": "mint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ]
    },
    "179": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0"
      ]
    },
    "180": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0",
        "8"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "eq%0#0"
      ]
    },
    "182": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tokenId#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0"
      ]
    },
    "186": {
      "op": "dup",
      "defined_out": [
        "owner#0",
        "owner#0 (copy)",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "owner#0 (copy)"
      ]
    },
    "187": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "len%1#0"
      ]
    },
    "188": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%1#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "len%1#0",
        "32"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "eq%1#0"
      ]
    },
    "190": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "tokenId#0",
        "owner#0"
      ]
    },
    "191": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "limit#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0"
      ]
    },
    "194": {
      "op": "dup",
      "defined_out": [
        "limit#0",
        "limit#0 (copy)",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "limit#0 (copy)"
      ]
    },
    "195": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "limit#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "len%2#0"
      ]
    },
    "196": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "len%2#0",
        "8"
      ]
    },
    "197": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "limit#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "eq%2#0"
      ]
    },
    "198": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0"
      ]
    },
    "199": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0"
      ]
    },
    "202": {
      "op": "dup",
      "defined_out": [
        "limit#0",
        "owner#0",
        "score#0",
        "score#0 (copy)",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "score#0 (copy)"
      ]
    },
    "203": {
      "op": "len",
      "defined_out": [
        "len%3#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "len%3#0"
      ]
    },
    "204": {
      "op": "intc_1 // 8",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "len%3#0",
        "8"
      ]
    },
    "205": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "eq%3#0"
      ]
    },
    "206": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0"
      ]
    },
    "207": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0"
      ]
    },
    "210": {
      "op": "dup",
      "defined_out": [
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0",
        "url#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "url#0 (copy)"
      ]
    },
    "211": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0",
        "url#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "url#0 (copy)",
        "0"
      ]
    },
    "212": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "aggregate%array_length%0#0"
      ]
    },
    "213": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "215": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "add%0#0"
      ]
    },
    "216": {
      "op": "dig 1",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "add%0#0",
        "url#0 (copy)"
      ]
    },
    "218": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%4#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "add%0#0",
        "len%4#0"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "limit#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "eq%4#0"
      ]
    },
    "220": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0"
      ]
    },
    "221": {
      "op": "dig 3",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "limit#0",
        "score#0",
        "url#0",
        "owner#0 (copy)"
      ]
    },
    "223": {
      "op": "uncover 3",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "score#0",
        "url#0",
        "owner#0 (copy)",
        "limit#0"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "owner#0",
        "score#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "score#0",
        "url#0",
        "aggregate%head%1#0"
      ]
    },
    "226": {
      "op": "uncover 2",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "url#0",
        "aggregate%head%1#0",
        "score#0"
      ]
    },
    "228": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "owner#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "url#0",
        "aggregate%head%2#0"
      ]
    },
    "229": {
      "op": "pushbytes 0x0032",
      "defined_out": [
        "0x0032",
        "aggregate%head%2#0",
        "owner#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "url#0",
        "aggregate%head%2#0",
        "0x0032"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "owner#0",
        "tokenId#0",
        "url#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "url#0",
        "aggregate%head%3#0"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "aggregate%head%3#0",
        "url#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "info#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0"
      ]
    },
    "236": {
      "op": "bytec_0 // \"bcsnft_\"",
      "defined_out": [
        "\"bcsnft_\"",
        "info#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0",
        "\"bcsnft_\""
      ]
    },
    "237": {
      "op": "dig 3",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0",
        "\"bcsnft_\"",
        "tokenId#0 (copy)"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "info#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0",
        "box_prefixed_key%0#0"
      ]
    },
    "240": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "info#0",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "241": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "info#0",
        "owner#0",
        "tokenId#0",
        "{box_del}"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "242": {
      "op": "pop",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "info#0",
        "box_prefixed_key%0#0"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "box_prefixed_key%0#0",
        "info#0"
      ]
    },
    "244": {
      "op": "box_put",
      "stack_out": [
        "tokenId#0",
        "owner#0"
      ]
    },
    "245": {
      "op": "bytec_2 // \"bcsaddr_\"",
      "defined_out": [
        "\"bcsaddr_\"",
        "owner#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "owner#0",
        "\"bcsaddr_\""
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "tokenId#0",
        "\"bcsaddr_\"",
        "owner#0"
      ]
    },
    "247": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "box_prefixed_key%1#0"
      ]
    },
    "248": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "tokenId#0"
      ]
    },
    "249": {
      "op": "box_put",
      "stack_out": []
    },
    "250": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "251": {
      "op": "return",
      "stack_out": []
    },
    "252": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.get_credit_info[routing]",
      "params": {},
      "block": "get_credit_info",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0"
      ]
    },
    "255": {
      "op": "dup",
      "defined_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ]
    },
    "256": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0"
      ]
    },
    "257": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0",
        "8"
      ]
    },
    "258": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "eq%0#0"
      ]
    },
    "259": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tokenId#0"
      ]
    },
    "260": {
      "op": "bytec_0 // \"bcsnft_\"",
      "defined_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "\"bcsnft_\""
      ]
    },
    "261": {
      "op": "swap",
      "stack_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "263": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "264": {
      "error": "check self.nft_map entry exists",
      "op": "assert // check self.nft_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "265": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "267": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "268": {
      "op": "log",
      "stack_out": []
    },
    "269": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "270": {
      "op": "return",
      "stack_out": []
    },
    "271": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.get_credit_info_by_address[routing]",
      "params": {},
      "block": "get_credit_info_by_address",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "274": {
      "op": "dup",
      "defined_out": [
        "owner#0",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "owner#0 (copy)"
      ]
    },
    "275": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "len%0#0"
      ]
    },
    "276": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "len%0#0",
        "32"
      ]
    },
    "277": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "eq%0#0"
      ]
    },
    "278": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "owner#0"
      ]
    },
    "279": {
      "op": "bytec_2 // \"bcsaddr_\"",
      "defined_out": [
        "\"bcsaddr_\"",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "\"bcsaddr_\""
      ]
    },
    "280": {
      "op": "swap",
      "stack_out": [
        "\"bcsaddr_\"",
        "owner#0"
      ]
    },
    "281": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "282": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%1#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "aggregate%box_get%1#0"
      ]
    },
    "283": {
      "error": "check self.address_map entry exists",
      "op": "assert // check self.address_map entry exists",
      "stack_out": [
        "tokenId#0"
      ]
    },
    "284": {
      "op": "bytec_0 // \"bcsnft_\"",
      "defined_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "\"bcsnft_\""
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0"
      ]
    },
    "287": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "288": {
      "error": "check self.nft_map entry exists",
      "op": "assert // check self.nft_map entry exists",
      "stack_out": [
        "aggregate%box_get%2#0"
      ]
    },
    "289": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%2#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%2#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "292": {
      "op": "log",
      "stack_out": []
    },
    "293": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.get_metadata_url[routing]",
      "params": {},
      "block": "get_metadata_url",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0"
      ]
    },
    "298": {
      "op": "dup",
      "defined_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ]
    },
    "299": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0"
      ]
    },
    "300": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0",
        "8"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "eq%0#0"
      ]
    },
    "302": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tokenId#0"
      ]
    },
    "303": {
      "op": "bytec_0 // \"bcsnft_\"",
      "defined_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "\"bcsnft_\""
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "306": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "307": {
      "error": "check self.nft_map entry exists",
      "op": "assert // check self.nft_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "308": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "309": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "48"
      ]
    },
    "311": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "312": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "314": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "315": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0"
      ]
    },
    "316": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "0x151f7c75"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%substring3%0#0"
      ]
    },
    "318": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "319": {
      "op": "log",
      "stack_out": []
    },
    "320": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "321": {
      "op": "return",
      "stack_out": []
    },
    "322": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.update_credit_info_by_address[routing]",
      "params": {},
      "block": "update_credit_info_by_address",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "325": {
      "op": "dup",
      "defined_out": [
        "owner#0",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "owner#0 (copy)"
      ]
    },
    "326": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "len%0#0"
      ]
    },
    "327": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "len%0#0",
        "32"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "eq%0#0"
      ]
    },
    "329": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "owner#0"
      ]
    },
    "330": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "new_limit#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0"
      ]
    },
    "333": {
      "op": "dup",
      "defined_out": [
        "new_limit#0",
        "new_limit#0 (copy)",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_limit#0 (copy)"
      ]
    },
    "334": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "new_limit#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "len%1#0"
      ]
    },
    "335": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%1#0",
        "new_limit#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "len%1#0",
        "8"
      ]
    },
    "336": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "new_limit#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "eq%1#0"
      ]
    },
    "337": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "owner#0",
        "new_limit#0"
      ]
    },
    "338": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "new_limit#0",
        "new_score#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0"
      ]
    },
    "341": {
      "op": "dup",
      "defined_out": [
        "new_limit#0",
        "new_score#0",
        "new_score#0 (copy)",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0",
        "new_score#0 (copy)"
      ]
    },
    "342": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "new_limit#0",
        "new_score#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0",
        "len%2#0"
      ]
    },
    "343": {
      "op": "intc_1 // 8",
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0",
        "len%2#0",
        "8"
      ]
    },
    "344": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "new_limit#0",
        "new_score#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0",
        "eq%2#0"
      ]
    },
    "345": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0"
      ]
    },
    "346": {
      "op": "bytec_2 // \"bcsaddr_\"",
      "defined_out": [
        "\"bcsaddr_\"",
        "new_limit#0",
        "new_score#0",
        "owner#0"
      ],
      "stack_out": [
        "owner#0",
        "new_limit#0",
        "new_score#0",
        "\"bcsaddr_\""
      ]
    },
    "347": {
      "op": "uncover 3",
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "\"bcsaddr_\"",
        "owner#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "new_limit#0",
        "new_score#0"
      ],
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "box_prefixed_key%0#0"
      ]
    },
    "350": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%1#0",
        "new_limit#0",
        "new_score#0",
        "tokenId#0"
      ],
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "tokenId#0",
        "aggregate%box_get%1#0"
      ]
    },
    "351": {
      "error": "check self.address_map entry exists",
      "op": "assert // check self.address_map entry exists",
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "tokenId#0"
      ]
    },
    "352": {
      "op": "bytec_0 // \"bcsnft_\"",
      "defined_out": [
        "\"bcsnft_\"",
        "new_limit#0",
        "new_score#0",
        "tokenId#0"
      ],
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "tokenId#0",
        "\"bcsnft_\""
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "\"bcsnft_\"",
        "tokenId#0"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "new_limit#0",
        "new_score#0"
      ],
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "box_prefixed_key%1#0"
      ]
    },
    "355": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)",
        "new_limit#0",
        "new_score#0"
      ],
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "356": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%3#0",
        "box_prefixed_key%1#0",
        "info#0",
        "new_limit#0",
        "new_score#0"
      ],
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "box_prefixed_key%1#0",
        "info#0",
        "aggregate%box_get%3#0"
      ]
    },
    "357": {
      "error": "check self.nft_map entry exists",
      "op": "assert // check self.nft_map entry exists",
      "stack_out": [
        "new_limit#0",
        "new_score#0",
        "box_prefixed_key%1#0",
        "info#0"
      ]
    },
    "358": {
      "op": "uncover 3",
      "stack_out": [
        "new_score#0",
        "box_prefixed_key%1#0",
        "info#0",
        "new_limit#0"
      ]
    },
    "360": {
      "op": "replace2 32",
      "stack_out": [
        "new_score#0",
        "box_prefixed_key%1#0",
        "info#0"
      ]
    },
    "362": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%1#0",
        "info#0",
        "new_score#0"
      ]
    },
    "364": {
      "op": "replace2 40",
      "stack_out": [
        "box_prefixed_key%1#0",
        "info#0"
      ]
    },
    "366": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%1#0",
        "info#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "368": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%1#0",
        "info#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "info#0",
        "{box_del}"
      ]
    },
    "369": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%1#0",
        "info#0"
      ]
    },
    "370": {
      "op": "box_put",
      "stack_out": []
    },
    "371": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "372": {
      "op": "return",
      "stack_out": []
    },
    "373": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.arc72_ownerOf[routing]",
      "params": {},
      "block": "arc72_ownerOf",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0"
      ]
    },
    "376": {
      "op": "dup",
      "defined_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0",
        "tokenId#0 (copy)"
      ]
    },
    "377": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0"
      ]
    },
    "378": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "len%0#0",
        "8"
      ]
    },
    "379": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "eq%0#0"
      ]
    },
    "380": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tokenId#0"
      ]
    },
    "381": {
      "op": "bytec_0 // \"bcsnft_\"",
      "defined_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0",
        "\"bcsnft_\""
      ]
    },
    "382": {
      "op": "swap",
      "stack_out": [
        "\"bcsnft_\"",
        "tokenId#0"
      ]
    },
    "383": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "384": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "385": {
      "op": "intc_2 // 32",
      "defined_out": [
        "0",
        "32",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "0",
        "32"
      ]
    },
    "386": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "387": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0",
        "0x151f7c75"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "box%box_extract%0#0"
      ]
    },
    "389": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "390": {
      "op": "log",
      "stack_out": []
    },
    "391": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": []
    },
    "393": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.arc72_transferFrom[routing]",
      "params": {},
      "block": "arc72_transferFrom",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "from_#0"
      ],
      "stack_out": [
        "from_#0"
      ]
    },
    "396": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "397": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "32"
      ]
    },
    "398": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "399": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": []
    },
    "400": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "to#0"
      ],
      "stack_out": [
        "to#0"
      ]
    },
    "403": {
      "op": "len",
      "defined_out": [
        "len%1#0"
      ],
      "stack_out": [
        "len%1#0"
      ]
    },
    "404": {
      "op": "intc_2 // 32",
      "stack_out": [
        "len%1#0",
        "32"
      ]
    },
    "405": {
      "op": "==",
      "defined_out": [
        "eq%1#0"
      ],
      "stack_out": [
        "eq%1#0"
      ]
    },
    "406": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": []
    },
    "407": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tokenId#0"
      ]
    },
    "410": {
      "op": "len",
      "defined_out": [
        "len%2#0"
      ],
      "stack_out": [
        "len%2#0"
      ]
    },
    "411": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%2#0"
      ],
      "stack_out": [
        "len%2#0",
        "8"
      ]
    },
    "412": {
      "op": "==",
      "defined_out": [
        "eq%2#0"
      ],
      "stack_out": [
        "eq%2#0"
      ]
    },
    "413": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": []
    },
    "414": {
      "error": "This NFT is soulbound and cannot be transferred",
      "op": "err // This NFT is soulbound and cannot be transferred"
    },
    "415": {
      "subroutine": "smart_contracts.nftcreditscore.contract.CreditScoreNFT.hello[routing]",
      "params": {},
      "block": "hello",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "418": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "419": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "420": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "421": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "423": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "424": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "426": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "427": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "428": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "432": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \"",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "\"Hello, \"",
        "name#0"
      ]
    },
    "442": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "443": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "444": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "445": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "446": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "449": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "450": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "451": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "452": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "453": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "454": {
      "op": "log",
      "stack_out": []
    },
    "455": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "456": {
      "op": "return",
      "stack_out": []
    }
  }
}